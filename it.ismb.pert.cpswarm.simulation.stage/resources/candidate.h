// FULLY MESHED NETWORK
#ifndef FULLY_MESHED_NETWORK_H
#define FULLY_MESHED_NETWORK_H

#include <math.h>

namespace candidate {

const int iterationCount = 2;
const int inputCount = 6;
const int outputCount = 2;
const int hiddenNodeCount = 24;
const int nodeCount = inputCount + hiddenNodeCount + outputCount;

float weights[nodeCount][nodeCount] = {{0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}, {3.7798498f, -1.8876059f, 5.486956f, 3.493244f, 0.12366983f, 5.624942f, 0.5475191f, 5.244805f, 2.8944728f, 2.925392f, -5.6280074f, -1.9379194f, 2.4738817f, -0.91651386f, 0.19003762f, 0.19646016f, 2.9979947f, -1.2698605f, -2.547875f, 0.3657352f, -1.6140027f, -3.445346f, -0.84335583f, -1.2511057f, -4.283164f, -1.6063797f, -5.979135f, -1.150846f, -1.5437218f, -0.4074654f, -3.5585685f, 2.4589894f}, {-2.2296176f, 4.358034f, 2.5976527f, 0.99095345f, 2.941654f, -5.3231225f, 5.303375f, -3.3802328f, 5.149481f, 1.8285295f, 0.5491782f, 0.6823195f, 4.3377976f, -4.672297f, 1.3129321f, 0.9492084f, -4.8603487f, 4.8704953f, -2.03098f, 5.717209f, -1.4169952f, 0.5475739f, 0.68068355f, -0.33666617f, 3.414591f, -2.8302279f, 5.35885f, 0.3647102f, 5.8166046f, -4.5044813f, 3.014949f, -4.1891947f}, {-0.6824984f, 1.9719609f, -2.9099894f, -5.0958242f, -4.091064f, -0.59036154f, -5.336938f, -4.294187f, -5.7522407f, -4.893417f, 1.2412351f, -2.1337018f, -3.269926f, -5.996442f, 3.267736f, -5.419168f, -0.24790657f, -0.65084887f, 2.35616f, -5.7310224f, -3.4171534f, 2.700609f, 3.77038f, 5.7194085f, -3.632159f, 2.9393973f, 1.1356732f, -0.50238967f, -0.10313173f, 1.722743f, -4.9486184f, 0.9342759f}, {3.429146f, 0.13086009f, 1.8363744f, -2.5244186f, 5.6675634f, -3.7750633f, 5.262072f, 3.133228f, 5.806684f, -2.8094158f, -3.72509f, 1.3053493f, 1.7424356f, 4.546959f, 1.541872f, 1.2517519f, -0.7414179f, -0.283556f, 5.964172f, -3.597608f, -2.1530123f, -0.7212018f, 3.2288315f, 4.5625477f, 3.7408442f, -3.2280257f, -2.7566721f, -0.5055624f, 1.1758755f, 2.0536492f, -1.1351941f, -1.4798194f}, {-2.9070256f, 5.159576f, -2.6660333f, -0.98631644f, 3.292515f, 2.6278334f, 4.1292725f, 3.9348054f, 4.0458317f, -2.5972445f, -3.5600772f, 4.393843f, -0.7833912f, 4.382347f, 5.7617755f, 2.31407f, 5.580719f, 3.576631f, -0.935235f, 4.293437f, 3.003067f, -0.34800547f, 4.7230215f, -0.38359088f, 0.22654071f, -4.2712817f, -0.8162629f, -0.9642319f, 4.630847f, -5.063058f, 5.8634305f, 3.569872f}, {5.0605316f, -0.6967719f, 0.5725668f, 0.9636837f, -5.202466f, -0.46725747f, -2.2803226f, -4.5028296f, 2.7401261f, 3.8851018f, 4.3177123f, 4.616986f, 4.126184f, 4.1736593f, 5.4771442f, 2.5499253f, -0.2611915f, -3.816136f, 0.20434262f, 3.1555376f, -1.9706228f, -2.1482377f, 5.3529506f, 2.6016366f, -4.386104f, 4.293551f, -4.362772f, -0.8311097f, -5.258348f, 2.0185852f, -4.453411f, -2.2585208f}, {5.201206f, 2.0122836f, 0.7713129f, -2.0065622f, -4.195282f, 5.0639033f, -1.8912587f, -5.1535497f, -5.356173f, -0.5249069f, 3.0731764f, -1.7453685f, 2.1398098f, -4.465424f, 1.4925066f, 3.9755375f, 1.5656497f, 5.590327f, 4.170652f, -2.724228f, 5.996359f, -3.0985653f, -2.6519163f, 4.4620957f, -3.027345f, 4.593917f, -5.7994084f, -0.65129316f, 4.054151f, -4.8465276f, -4.7229404f, 0.17766109f}, {0.89987546f, 3.0074725f, -0.29139143f, -3.9177728f, 5.2744308f, -2.9821494f, 1.7682643f, -1.1426102f, -4.4663744f, -5.030727f, 3.4992282f, -4.6647387f, -2.4211557f, 1.9936253f, 3.8720005f, -0.15513532f, -0.8362817f, 2.5291636f, 3.7232542f, -5.73879f, -3.3925946f, -4.535522f, -5.3423553f, -0.42346278f, -5.5961814f, 4.9798784f, 5.599654f, 4.81712f, 2.7535334f, 3.3307233f, 2.6061902f, -0.13150278f}, {-1.9523467f, -4.2501254f, -4.3100324f, 1.7930163f, 0.6341895f, -3.5428226f, 2.6921525f, -3.0269942f, -5.177407f, -2.365229f, -4.2806034f, -5.511391f, 3.8043842f, -2.7583044f, -5.87825f, -5.8059797f, 1.5823548f, -2.335851f, -0.18075994f, 5.441452f, -4.3035903f, -3.6760705f, -2.9458866f, 1.0547107f, 3.0560124f, -2.5992162f, 0.69469404f, -2.638804f, -4.5325007f, -3.6268766f, 1.497474f, 3.9145248f}, {-5.7191997f, 4.6520224f, 3.9266987f, 0.3390522f, 3.1878438f, 4.226266f, 1.1904578f, -5.642103f, -3.7277153f, 0.79766405f, 5.4091763f, -2.7089558f, 3.294409f, -3.4012334f, -2.63662f, 5.376256f, -1.1059982f, -0.076379254f, -1.7703216f, 5.735682f, 1.2413638f, -5.665551f, 3.6296294f, 0.8478065f, 0.01609693f, -1.6240011f, 4.622766f, -4.7828164f, 1.5118772f, 2.0479312f, -3.1302574f, 3.4044514f}, {1.20358f, -0.42173538f, 5.1845555f, 2.975931f, 0.3363891f, -4.3938007f, 0.5816059f, 0.65199023f, 1.8832971f, -0.7670316f, 4.884243f, 4.80418f, -1.782688f, -5.3779445f, 3.4758637f, 3.2545464f, -1.0805123f, 5.8841715f, -5.5804696f, 1.7653593f, 4.7134757f, -5.0876584f, -4.782153f, 5.3602757f, 0.61380494f, -0.20310009f, -0.9764395f, -2.170893f, 4.3820047f, -3.3599052f, -1.192883f, -5.492622f}, {2.9767187f, -4.4071436f, -2.0039144f, 0.5844065f, 5.7689123f, 4.856024f, -3.5637274f, -4.6409674f, 3.0799925f, 5.5282135f, 1.2772723f, 1.2944406f, 0.043887697f, -5.2106395f, -5.8233266f, -1.7443395f, -3.3665292f, 2.9298387f, -3.2557075f, 5.240711f, -5.007189f, -1.953292f, -3.7083485f, -5.013754f, 5.7350726f, -1.8063828f, 3.5726762f, 1.1808467f, 5.619512f, 4.834338f, -3.2994459f, 5.1417975f}, {0.055372942f, -5.000093f, -3.8958514f, 2.4612114f, 2.9735527f, 3.5026517f, -3.0611684f, -2.2216902f, -5.869997f, 5.1201415f, -4.840419f, -0.3182349f, 2.3923328f, 5.223399f, 5.4963603f, 0.25303578f, -5.0076385f, 0.43747503f, 3.1059783f, -4.12733f, -2.1928253f, -2.0948262f, 5.6585383f, 1.8620476f, 3.8467658f, 1.0996249f, 0.08134238f, -4.7662897f, 3.1419857f, -4.5356255f, -2.3401692f, 0.94421f}, {3.733911f, 3.4881094f, 3.805112f, -5.769087f, -3.263251f, -1.0704058f, -3.655497f, -3.9913077f, 4.8074045f, -5.2087445f, -5.576904f, -4.6480103f, 5.6328354f, -1.6670699f, -4.7042837f, -1.9240596f, -5.566879f, -2.9738777f, 5.070686f, -3.861541f, -0.17462079f, 4.144697f, 4.1563454f, 2.86406f, -2.455861f, 3.812831f, -1.7043436f, 0.4146619f, -1.6093891f, -3.9464505f, 3.1765637f, -1.34967f}, {3.674166f, 0.36749968f, -4.496637f, -2.1747427f, 2.4928818f, 5.4641466f, 0.3446133f, 3.049807f, -1.5462006f, -2.154724f, 5.5513835f, 4.8611565f, -0.40444803f, 3.3222198f, -4.4082766f, 2.566318f, 1.631731f, -3.7717707f, -0.57958144f, 1.4993587f, 3.0692592f, 4.1307106f, 0.837415f, 4.4855175f, 5.3338227f, 0.3610409f, 2.6899214f, 4.685584f, -4.710549f, 0.9433751f, 2.4048717f, 1.860943f}, {3.2655993f, -1.6810842f, 2.0489094f, 4.906635f, 1.9722744f, 4.6285696f, -2.0378048f, -3.6659217f, 1.0711559f, -4.486376f, 4.125569f, -0.7350335f, -5.868418f, 2.0923846f, 0.8369921f, 2.8538535f, -5.285255f, 1.3477769f, 0.4897289f, -3.071002f, -5.1874156f, -3.9811738f, -3.3838565f, -2.031281f, 2.083743f, 4.682488f, -5.7868714f, -5.38455f, 1.0617684f, -2.1437314f, 5.4833174f, -5.7487f}, {0.9325595f, 4.075447f, 1.8268902f, -3.6661508f, 2.111053f, 3.2314804f, -5.8217916f, 0.6245112f, 5.226103f, -1.05272f, -0.5158084f, -2.0083685f, -2.5286589f, -1.6721193f, 0.31071714f, -1.7667806f, 4.504341f, -4.2324014f, 1.8546444f, -0.2754317f, 4.269588f, 5.4094505f, 0.5445301f, 0.57130206f, -5.8915267f, 3.5375667f, -3.927403f, 2.057898f, -2.669483f, -4.8694944f, 4.2255135f, 4.922337f}, {2.7525892f, 4.5495024f, 3.1242313f, -3.7485359f, -0.71538866f, 3.9282737f, 5.285511f, 1.9647088f, -3.3055327f, 2.5702412f, 4.8694654f, -3.8380268f, 1.1224984f, 4.694449f, -3.5743506f, -3.0627787f, -5.994461f, 2.3726048f, -3.1351025f, 3.0095115f, -0.21210617f, 1.5275941f, -2.2596157f, -4.9904027f, 0.9666735f, -5.9932013f, 2.8974168f, -3.5818143f, 4.7931495f, 4.941532f, 3.6163366f, 5.6542554f}, {0.27185932f, 2.5096464f, -5.8326697f, -4.5434594f, 1.3590463f, -2.0538125f, -2.881953f, 1.1252463f, 2.0258446f, -1.3380891f, -0.66315705f, 3.2231069f, 2.157792f, 5.478512f, 3.7310483f, -5.129449f, -2.83332f, 1.6879064f, -1.833856f, -2.2090836f, 2.1602962f, -0.32774696f, -5.922594f, 4.5946465f, 3.5805357f, 2.7159457f, -0.32636592f, 4.9646235f, -4.6350727f, 5.727708f, -3.4248755f, -3.8927388f}, {0.72765553f, 3.0835238f, -0.84180486f, -5.2852955f, -3.534098f, -1.988342f, -0.06936075f, 0.5511629f, -5.5740013f, -1.8930879f, 4.4686837f, 5.700826f, -2.2717688f, -2.4178066f, 3.3170362f, -0.16021551f, -2.9155006f, -1.8760115f, 1.2429205f, 2.5977874f, -5.0317626f, 1.9774898f, -0.65492487f, -3.715419f, 3.5495417f, 1.3142316f, -5.940999f, -4.873034f, 3.7073998f, 2.0681558f, -1.483165f, 1.5833524f}, {5.7814817f, 0.044443596f, 0.34555107f, -2.473183f, -1.2677631f, 3.2775447f, -4.944489f, -5.3905697f, 3.7207623f, -4.5471087f, 1.557685f, 2.2666485f, 4.372987f, -3.1202374f, -5.3243365f, -1.6373813f, 2.6737213f, 5.4212337f, 3.044702f, -3.894801f, -2.3262975f, 1.0139092f, -5.5502796f, 4.0651674f, 4.919576f, -3.1709762f, 4.4113293f, 2.1895137f, 4.136491f, -4.3729625f, 1.43041f, 4.8511863f}, {5.1820655f, -2.655268f, -4.5106373f, -2.0481489f, 1.3517058f, 0.6690743f, -3.7189543f, -3.2361882f, 5.4420443f, -5.416724f, 4.546491f, -4.2540636f, 3.9668357f, 3.400614f, 1.2277126f, -5.038589f, -0.27591997f, -4.108122f, -0.20899574f, -4.24762f, 3.3124275f, 0.758468f, -3.708841f, -1.8692881f, 5.784073f, 2.84083f, 3.0967698f, -5.0444417f, 4.0800066f, -3.6835065f, -4.0872774f, -0.8734252f}, {5.184957f, 4.2477074f, -4.2478395f, -3.0993211f, 5.754627f, 1.3612943f, -0.6424636f, -2.7069201f, -3.3600023f, 4.9868402f, 0.67794555f, 5.152667f, -1.0547978f, 4.763206f, -3.5622623f, -4.6614532f, -3.1469247f, -1.6800106f, -3.2534397f, -0.08979378f, 2.7567894f, 1.3476952f, 2.3493502f, -2.391866f, -0.6358669f, 5.7459774f, 5.9472923f, 4.455669f, -2.1275518f, 2.0798202f, 2.1623743f, 3.5459175f}, {-1.9147766f, 5.448635f, 4.776802f, 1.9192543f, 5.852702f, -5.6413136f, 5.3715262f, 5.984461f, -3.4213996f, 4.0545344f, 5.470942f, 2.2059822f, 1.410967f, 4.8072114f, -4.091445f, -4.8983064f, 5.9284325f, 0.46020034f, -2.521912f, 4.365816f, 0.1772663f, 5.437086f, 0.57776886f, 1.1424739f, -2.0464962f, -4.145648f, 3.0647106f, -1.7990334f, -3.8462546f, -4.344295f, 0.47698063f, 3.9974973f}, {-3.5852263f, -5.5198345f, 5.0260653f, 4.0703406f, 3.5585074f, 0.46946996f, 1.6542053f, 5.4899683f, 4.2440553f, 1.7075887f, 1.8072149f, 5.951777f, -5.0226097f, -4.7971735f, 2.4074924f, 4.1500187f, -1.7076042f, -4.268849f, 0.3935674f, -0.7248572f, 5.414618f, -3.0199175f, -2.563624f, -1.8592584f, 5.814339f, 0.74154484f, -0.8616919f, -5.1100883f, -3.090893f, 4.4050217f, 4.543511f, 2.2101085f}, {3.7015777f, -4.794083f, -4.1277037f, 0.8819558f, -2.2764728f, 0.8544184f, 2.6719f, 1.6719147f, 0.69374734f, -3.137413f, 3.4857998f, -4.9918995f, 1.782854f, -2.726691f, -1.8286868f, 4.5615997f, -5.5283227f, 2.0466673f, 3.419844f, -2.8390326f, -3.4693072f, -5.5076284f, 4.439579f, 5.4340177f, 0.6372809f, -3.4839833f, -3.521651f, -1.5230025f, -2.0240934f, -4.6485972f, 4.7094727f, 1.8854982f}};
float biases[nodeCount] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.51714134f, 5.740222f, -2.0629005f, 4.531255f, -0.8254991f, -2.8406103f, -2.0188382f, 3.0568254f, -5.3250155f, -1.1353452f, -3.6973467f, -2.5922482f, -5.168f, 2.3575027f, 3.8322966f, -0.72755766f, -4.599525f, -3.0989995f, -0.6453955f, -2.4323769f, -0.9515751f, 5.217721f, -3.6447847f, -0.4700399f, -4.0936766f, 2.8655357f};
float state[nodeCount];
float sums[nodeCount];

float tanhFunction(float x) {
	return (float)tanh(x);
}

float sigmoidFunction(float x) {
	return 1.0f / (1.0f + (float)exp(-x));
}

float reluFunction(float x) {
	if (x >= 1) {
		return 1;
	} else {
		if (x <= 0) {
			return 0;
		} else {
			return x;
		}
	}
}

void reset() {
	for (int i = 0; i < nodeCount; i++) {
		state[i] = 0;
	}
}

void calculate(float input[], float output[]) {
	// copy in input
	for (int i = 0; i < inputCount; i++) {
		state[i] = input[i];
	}

	for (int k = 0; k < iterationCount; k++) {
	
		// calculate sums
		for (int i = inputCount; i < nodeCount; i++) {
			float sum = 0;
			for (int j = 0; j < nodeCount; j++) {
				sum += weights[i][j] * state[j];
			}
			sums[i] = biases[i] + sum;

			// TODO: add random biases here
		}

		// activate to calculate new state
		for (int i = inputCount; i < nodeCount; i++) {
			state[i] = sigmoidFunction(sums[i]);
		}
	}

	// copy out output
	for (int i = 0; i < outputCount; i++) {
		output[i] = state[inputCount + hiddenNodeCount + i];
	}
}

} // namespace candidate

#endif // FULLY_MESHED_NETWORK_H